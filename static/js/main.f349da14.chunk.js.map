{"version":3,"sources":["components/Home.js","components/Projects.js","components/Goals.js","components/About.js","components/Blogs.js","components/Contact.js","components/NotFoundPage.js","components/Header.js","routers/AppRouter.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","href","target","Projects","Goals","About","Blogs","props","className","Contact","NotFoundPage","Header","react_router_dom","to","exact","activeClassName","AppRouter","state","blogs","_this2","this","components_Header","react_router","path","component","Home","render","components_Blogs","React","Component","Boolean","window","location","hostname","match","ReactDOM","routers_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAWeA,MATf,WACE,OACEC,EAAAC,EAAAC,cAAA,uBAEEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,0BAA0BC,OAAO,UAAzC,uBCESC,EANE,WACb,OACIL,EAAAC,EAAAC,cAAA,wBCIOI,EAND,WACV,OACIN,EAAAC,EAAAC,cAAA,qBCIOK,EAND,WACV,OACIP,EAAAC,EAAAC,cAAA,qBCqBOM,eAXD,SAACC,GACd,OACCT,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,mBACSF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,uBAdvB,0ICIKC,EANC,WACZ,OACIX,EAAAC,EAAAC,cAAA,uBCIOU,EANM,WACjB,OACIZ,EAAAC,EAAAC,cAAA,4BCYOW,EAbA,WACX,OACIb,EAAAC,EAAAC,cAAA,oBACIF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,IAAIC,OAAO,EAAMC,gBAAgB,YAA7C,QACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,YAAYE,gBAAgB,YAAxC,YACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,SAASE,gBAAgB,YAArC,SACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,SAASE,gBAAgB,YAArC,SACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,SAASE,gBAAgB,YAArC,SACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,WAAWE,gBAAgB,YAAvC,aC0BGC,6MAxBXC,MAAQ,CACJC,MAAO,CAAC,wBAAwB,wFAG3B,IAAAC,EAAAC,KACL,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWC,EAAMX,OAAO,IACxChB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWrB,IACnCL,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWpB,IAChCN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWnB,IAChCP,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,SAASG,OAAQ,kBAAM5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAOT,MAAOC,EAAKF,MAAMC,WAC5DpB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWf,IAClCX,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOE,UAAWd,cAjBlBkB,IAAMC,iBCAVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO5B,EAAAC,EAAAC,cAACoC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f349da14.chunk.js","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      Portfolio\n      <a href=\"https://agnosticoder.me\" target=\"_blank\">MY Todo App React</a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nconst Projects = () => {\n    return (\n        <div>Projects</div>\n    );\n};\n\nexport default Projects;","import React from 'react';\n\nconst Goals = () => {\n    return (\n        <div>Goals</div>\n    );\n};\n\nexport default Goals;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>About</div>\n    );\n};\n\nexport default About;","import React from 'react';\nimport Prism from 'prismjs';\nimport '../styles/prism/prism.css';\n\nconst code = `\nonSubmit(e) {\n    e.preventDefault();\n    const job = {\n        title: 'Developer',\n        company: 'Facebook'\n    };\n}\n`;\n\nconst Blogs = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Blogs</h1>\n            <pre><code className=\"language-javascript\">\n                {code}\n            </code></pre>\n\t\t</div>\n\t);\n};\n\nexport default Blogs;\n\n\n","import React from 'react';\n\nconst Contact = () => {\n    return (\n        <div>Contact</div>\n    );\n};\n\nexport default Contact;","import React from 'react';\n\nconst NotFoundPage = () => {\n    return (\n        <div>NotFoundPage</div>\n    );\n};\n\nexport default NotFoundPage;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <div>Header\n            <NavLink to='/' exact={true} activeClassName='selected'>Home</NavLink>\n            <NavLink to='/projects' activeClassName='selected' >Projects</NavLink>\n            <NavLink to='/goals' activeClassName='selected' >Goals</NavLink>\n            <NavLink to='/about' activeClassName='selected' >About</NavLink>\n            <NavLink to='/blogs' activeClassName='selected' >Blogs</NavLink>\n            <NavLink to='/contact' activeClassName='selected' >Contact</NavLink>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Home from '../components/Home';\nimport Projects from '../components/Projects';\nimport Goals from '../components/Goals';\nimport About from '../components/About';\nimport Blogs from '../components/Blogs';\nimport Contact from '../components/Contact';\nimport NotFoundPage from '../components/NotFoundPage';\nimport Header from '../components/Header';\n\n\nclass AppRouter extends React.Component {\n    state = {\n        blogs: ['This is my first blog','Second Blog']\n    }\n\n    render() {\n        return (\n            <div>\n                <HashRouter>\n                    <Header />\n                    <Switch>\n                        <Route path='/' component={Home} exact={true} />\n                        <Route path='/projects' component={Projects} />\n                        <Route path='/goals' component={Goals} />\n                        <Route path='/about' component={About} />\n                        <Route path='/blogs' render={() => <Blogs blogs={this.state.blogs}/>} />\n                        <Route path='/contact' component={Contact} />\n                        <Route component={NotFoundPage} />\n                    </Switch>\n                </HashRouter>\n            </div>\n        );\n    }    \n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppRouter from './routers/AppRouter';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}